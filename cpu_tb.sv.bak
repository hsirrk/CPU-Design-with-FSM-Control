`define n 16

`define RS 4'b0000
`define Register_load 4'b0001
`define RM_shift_load_b 4'b0010
`define RM_shift_load_C 4'b0011
`define RM_shift_write 4'b0100
`define RN_load_A 4'b0101
`define ALU_add 4'b0110
`define ALU_write 4'b0111
`define ALU_sub 4'b1000

module cpu_tb ();
	reg clk, reset, s, load, err;
	reg [15:0] in;
	wire [15:0] out;
	wire N, V, Z, w;



	cpu DUT(.clk(clk), .reset(reset), .s(s), .load(load), .in(in), .out(out), .N(N), .V(V), .Z(Z), .w(w) );

	task state_checker;
		input [3:0] expected_STATE;
	
	begin
		if (cpu_tb.DUT.FSM.ps !== expected_STATE ) begin
			$display("ERROR ** Regfile Output is %b, expected %b", cpu_tb.DUT.FSM.ps, expected_STATE );
			err = 1'b1;
		end
	end
	
	endtask
	
	task REG_checker; 
		input [`n-1:0] expected_R0;
		input [`n-1:0] expected_R1;
		input [`n-1:0] expected_R2;
		input [`n-1:0] expected_R3;
		input [`n-1:0] expected_R4;
		input [`n-1:0] expected_R5;
		input [`n-1:0] expected_R6;
		input [`n-1:0] expected_R7;

	begin
		if (cpu_tb.DUT.DTP.REGFILE.R0 !== expected_R0 ) begin
			$display("ERROR ** R0 is %b, expected %b", cpu_tb.DUT.DTP.REGFILE.R0, expected_R0 );
			err = 1'b1;
		end
		
		if (cpu_tb.DUT.DTP.REGFILE.R1 !== expected_R1 ) begin
			$display("ERROR ** R1 is %b, expected %b", cpu_tb.DUT.DTP.REGFILE.R1, expected_R1 );
			err = 1'b1;
		end
		
		if (cpu_tb.DUT.DTP.REGFILE.R2 !== expected_R2 ) begin
			$display("ERROR ** R2 is %b, expected %b", cpu_tb.DUT.DTP.REGFILE.R2, expected_R2 );
			err = 1'b1;
		end
		
		if (cpu_tb.DUT.DTP.REGFILE.R3 !== expected_R3 ) begin
			$display("ERROR ** R3 is %b, expected %b", cpu_tb.DUT.DTP.REGFILE.R3, expected_R3 );
			err = 1'b1;
		end
		
		if (cpu_tb.DUT.DTP.REGFILE.R4 !== expected_R4 ) begin
			$display("ERROR ** R4 is %b, expected %b", cpu_tb.DUT.DTP.REGFILE.R4, expected_R4 );
			err = 1'b1;
		end
		
		if (cpu_tb.DUT.DTP.REGFILE.R5 !== expected_R5 ) begin
			$display("ERROR ** R5 is %b, expected %b", cpu_tb.DUT.DTP.REGFILE.R5, expected_R5 );
			err = 1'b1;
		end
		
		if (cpu_tb.DUT.DTP.REGFILE.R6 !== expected_R6 ) begin
			$display("ERROR ** R6 is %b, expected %b", cpu_tb.DUT.DTP.REGFILE.R6, expected_R6 );
			err = 1'b1;
		end
		
		if (cpu_tb.DUT.DTP.REGFILE.R7 !== expected_R7 ) begin
			$display("ERROR ** R7 is %b, expected %b", cpu_tb.DUT.DTP.REGFILE.R7, expected_R7 );
			err = 1'b1;
		end
		
	end
	
	endtask

	initial begin //Sets the clock to be at a 5 time unit interval
		clk = 1'b0; 
		#5;
			repeat(45) begin
				clk = 1'b1; #5;
				clk = 1'b0; #5;
			end
	end

	
	initial begin
		//reset = 1, resetting the circuit
		err = 1'b0;
		s = 1'b0;
		load = 1'b0;
		$display("checking state = RS when reset = 1");
		reset = 1'b1;
		#10;
		state_checker(`RS);
		reset = 1'b0; //reset = 0
		
		//s,load = 1, in changes
		//Testing MOV R0, #42
		$display("checking MOV R0, #42");
		s = 1'b1;
		load = 1'b1;
		in = 16'b1101000001000010; //MOV R0, #42
		#10;
		state_checker(`RS);
		REG_checker(16'h42, 16'bx, 16'bx, 16'bx, 16'bx, 16'bx, 16'bx, 16'bx);
		
		
		//s,load = 1, in changes
		//Testing MOV R1, #13
		$display("checking MOV R1, #13");
		s = 1'b1;
		load = 1'b1;
		in = 16'b1101000100010011; //MOV R1, #13
		#10;
		state_checker(`RS);
		REG_checker(16'h42, 16'h13, 16'bx, 16'bx, 16'bx, 16'bx, 16'bx, 16'bx);
		
		//s,load = 1, in changes
		//Testing MOV R2, #13 - Signed extension
		$display("checking MOV R2, #80");
		s = 1'b1;
		load = 1'b1;
		in = 16'b1101001010000000; //MOV R2, #80
		#10;
		state_checker(`RS);
		REG_checker(16'h42, 16'h13, 16'hFF80, 16'bx, 16'bx, 16'bx, 16'bx, 16'bx);
		
		#300;
		
	
		
		if (~err) $display("PASSED");
		else $display ("FAILED");
		$stop;
	end
/*	
		//Change in input: readnum = 2, loada = 1
		//store R2 in register A
		$display("checking loada = sximm8 (h42)");
		readnum = 3'b010;
		loada = 1'b1;		
		#10;
		loadb_a_checker(16'b0, 16'h42);
		loada = 1'b0;
		
		//Change in input: asel = 0, bsel = 0, shift = 0, ALUop = 0, loadc = 1, loads = 1
		//Testing ADD Rn, R2, R0
		$display("checking ALUout = R2 + R0");
		asel = 1'b0;
		bsel = 1'b0;
		shift = 2'b00;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b1;
		#10;
		data_checker(16'h42, 16'h0, 16'h42, 3'b000, 16'h42);
		
		$display("checking C = h42 and is written to R3");
		write = 1'b1;
		writenum = 3'b011;
		readnum = 3'b011;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'h42);
		write = 1'b0;
		
		//Change in input: asel = 0, bsel = 1, shift = 0, ALUop = 0, loadc = 1, loads = 1
		//Testing Modification to Bin - sximm5
		$display("checking ALUout = R2 + sximm5");
		asel = 1'b0;
		bsel = 1'b1;
		shift = 2'b00;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b1;
		#10;
		data_checker(16'h42, 16'h0, 16'h55, 3'b000, 16'h55);
		
		$display("checking C = h55 and is written to R4");
		write = 1'b1;
		writenum = 3'b100;
		readnum = 3'b100;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'h55);
		write = 1'b0;
		
		//Change in input: readnum = 4, loada = 1
		//store R4 in register A
		$display("checking loada = C (h55)");
		readnum = 3'b100;
		loada = 1'b1;		
		#10;
		loadb_a_checker(16'b0, 16'h55);
		loada = 1'b0;
		
		//Change in input: asel = 0, bsel = 1, shift = 0, ALUop = 01, loadc = 1, loads = 1
		//Testing if status flag zero
		$display("checking ALUout = R2 - sximm5");
		sximm5 = 16'h55;
		asel = 1'b0;
		bsel = 1'b1;
		shift = 2'b00;
		ALUop = 2'b01;
		loadc = 1'b1;
		loads = 1'b1;
		#10;
		data_checker(16'h55, 16'h0, 16'h0, 3'b001, 16'h0);
		
		$display("checking C = h0 and is written to R4");
		write = 1'b1;
		writenum = 3'b100;
		readnum = 3'b100;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'h0);
		write = 1'b0;
		
		//Change in input: readnum = 4, loada = 1
		//store R4 in register A
		$display("checking loada = C (h0)");
		readnum = 3'b100;
		loada = 1'b1;		
		#10;
		loadb_a_checker(16'b0, 16'h0);
		loada = 1'b0;
		
		//write h64 to R2
		$display("checking sximm8 = h65 and is written to R2");
		sximm8 = 16'h65;
		writenum = 3'b010;
		readnum = 3'b010;
		vsel = 2'b01;
		#10;
		new_changes_checker(16'h65);
		write = 1'b0; //set write = 0
		
		//Change in input: readnum = 2, loadb = 1
		//store R2 in register B
		$display("checking loadb = sximm8 (h64)");
		readnum = 3'b010;
		loadb = 1'b1;
		#10;
		loadb_a_checker(16'h65, 16'h0);
		loadb = 1'b0; //set loadb = 1
		
		//Change in input: asel = 0, bsel = 0, shift = 0, ALUop = 01, loadc = 1, loads = 1
		//Testing if status flag negative
		$display("checking ALUout = 0 - sximm8");
		asel = 1'b0;
		bsel = 1'b0;
		shift = 2'b00;
		ALUop = 2'b01;
		loadc = 1'b1;
		loads = 1'b1;
		#10;
		data_checker(16'h65, 16'h65, 16'hFFBF, 3'b010, 16'hFFBF);
		
		$display("checking C = -65 and is written to R5");
		write = 1'b1;
		writenum = 3'b101;
		readnum = 3'b101;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'hFFBF);
		write = 1'b0;
		
		//write d127 to R2
		$display("checking sximm8 = d127 and is written to R2");
		sximm8 = 16'd127;
		writenum = 3'b010;
		readnum = 3'b010;
		vsel = 2'b01;
		#10;
		new_changes_checker(16'd127);
		write = 1'b0; //set write = 0
		
		//Change in input: readnum = 2, loadb = 1
		//store R2 in register B
		$display("checking loadb = sximm8 (d127)");
		readnum = 3'b010;
		loadb = 1'b1;
		#10;
		loadb_a_checker(16'd127, 16'h0);
		loadb = 1'b0; //set loadb = 1

		//Change in input: asel = 1, bsel = 0, shift = 01, ALUop = 0, loadc = 1, loads = 1
		//Testing shifting
		$display("checking ALUout = 127 shifter left once");
		asel = 1'b1;
		bsel = 1'b0;
		shift = 2'b01;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b1;
		#10;
		data_checker(16'd127, 16'd254, 16'd254, 3'b000, 16'd254);
		
		$display("checking C = 254 and is written to R6");
		write = 1'b1;
		writenum = 3'b110;
		readnum = 3'b110;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'd254);
		write = 1'b0;
		
		//Change in input: readnum = 6, loadb = 1
		//store R2 in register B
		$display("checking loadb = C (d254)");
		readnum = 3'b110;
		loadb = 1'b1;
		#10;
		loadb_a_checker(16'd254, 16'h0);
		loadb = 1'b0; //set loadb = 1
		
		//Change in input: asel = 1, bsel = 0, shift = 01, ALUop = 0, loadc = 1, loads = 1
		//Testing shifting
		$display("checking ALUout = 254 shifter left once");
		asel = 1'b1;
		bsel = 1'b0;
		shift = 2'b01;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b1;
		#10;
		data_checker(16'd254, 16'd508, 16'd508, 3'b000, 16'd508);
		
		$display("checking C = 508 and is written to R6");
		write = 1'b1;
		writenum = 3'b110;
		readnum = 3'b110;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'd508);
		write = 1'b0;
		
		//Change in input: readnum = 6, loadb = 1
		//store R2 in register B
		$display("checking loadb = C (d508)");
		readnum = 3'b110;
		loadb = 1'b1;
		#10;
		loadb_a_checker(16'd508, 16'h0);
		loadb = 1'b0; //set loadb = 1
		
		//Change in input: asel = 1, bsel = 0, shift = 01, ALUop = 0, loadc = 1, loads = 0
		//Testing shifting
		$display("checking ALUout = 508 shifter left once");
		asel = 1'b1;
		bsel = 1'b0;
		shift = 2'b01;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b0; //status stays the same as before
		#10;
		data_checker(16'd508, 16'd1016, 16'd1016, 3'b000, 16'd1016);
		
		$display("checking C = 1016 and is written to R6");
		write = 1'b1;
		writenum = 3'b110;
		readnum = 3'b110;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'd1016);
		write = 1'b0;
		
		//Change in input: readnum = 6, loadb = 1
		//store R2 in register B
		$display("checking loadb = C (d1016)");
		readnum = 3'b110;
		loadb = 1'b1;
		#10;
		loadb_a_checker(16'd1016, 16'h0);
		loadb = 1'b0; //set loadb = 1
		
		//Change in input: asel = 1, bsel = 0, shift = 01, ALUop = 0, loadc = 1, loads = 0
		//Testing shifting
		$display("checking ALUout = 1016 shifter left once");
		asel = 1'b1;
		bsel = 1'b0;
		shift = 2'b01;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b0; //status stays the same as before
		#10;
		data_checker(16'd1016, 16'd2032, 16'd2032, 3'b000, 16'd2032);
		
		$display("checking C = 2032 and is written to R6");
		write = 1'b1;
		writenum = 3'b110;
		readnum = 3'b110;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'd2032);
		write = 1'b0;
		
		//Change in input: readnum = 6, loadb = 1
		//store R2 in register B
		$display("checking loadb = C (d2032)");
		readnum = 3'b110;
		loadb = 1'b1;
		#10;
		loadb_a_checker(16'd2032, 16'h0);
		loadb = 1'b0; //set loadb = 1
		
		//Change in input: asel = 1, bsel = 0, shift = 01, ALUop = 0, loadc = 1, loads = 0
		//Testing shifting
		$display("checking ALUout = 2032 shifter left once");
		asel = 1'b1;
		bsel = 1'b0;
		shift = 2'b01;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b0; //status stays the same as before
		#10;
		data_checker(16'd2032, 16'd4064, 16'd4064, 3'b000, 16'd4064);
		
		$display("checking C = 4064 and is written to R6");
		write = 1'b1;
		writenum = 3'b110;
		readnum = 3'b110;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'd4064);
		write = 1'b0;
		
		//Change in input: readnum = 6, loadb = 1
		//store R2 in register B
		$display("checking loadb = C (d4064)");
		readnum = 3'b110;
		loadb = 1'b1;
		#10;
		loadb_a_checker(16'd4064, 16'h0);
		loadb = 1'b0; //set loadb = 1
		
		//Change in input: asel = 1, bsel = 0, shift = 01, ALUop = 0, loadc = 1, loads = 0
		//Testing shifting
		$display("checking ALUout = 4064 shifter left once");
		asel = 1'b1;
		bsel = 1'b0;
		shift = 2'b01;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b0; //status stays the same as before
		#10;
		data_checker(16'd4064, 16'd8128, 16'd8128, 3'b000, 16'd8128);

		$display("checking C = 8128 and is written to R6");
		write = 1'b1;
		writenum = 3'b110;
		readnum = 3'b110;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'd8128);
		write = 1'b0;
		
		//Change in input: readnum = 6, loadb = 1
		//store R2 in register B
		$display("checking loadb = C (d8128)");
		readnum = 3'b110;
		loadb = 1'b1;
		#10;
		loadb_a_checker(16'd8128, 16'h0);
		loadb = 1'b0; //set loadb = 1
		
		//Change in input: asel = 1, bsel = 0, shift = 01, ALUop = 0, loadc = 1, loads = 0
		//Testing shifting
		$display("checking ALUout = 8128 shifter left once");
		asel = 1'b1;
		bsel = 1'b0;
		shift = 2'b01;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b0; //status stays the same as before
		#10;
		data_checker(16'd8128, 16'd16256, 16'd16256, 3'b000, 16'd16256);
		
		$display("checking C = 16256 and is written to R6");
		write = 1'b1;
		writenum = 3'b110;
		readnum = 3'b110;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'd16256);
		write = 1'b0;
		
		//Change in input: readnum = 6, loadb = 1
		//store R2 in register B
		$display("checking loadb = C (d16256)");
		readnum = 3'b110;
		loadb = 1'b1;
		#10;
		loadb_a_checker(16'd16256, 16'h0);
		loadb = 1'b0; //set loadb = 1
		
		//Change in input: asel = 1, bsel = 0, shift = 01, ALUop = 0, loadc = 1, loads = 0
		//Testing shifting
		$display("checking ALUout = 16256 shifter left once");
		asel = 1'b1;
		bsel = 1'b0;
		shift = 2'b01;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b0; //status stays the same as before
		#10;
		data_checker(16'd16256, 16'd32512, 16'd32512, 3'b000, 16'd32512);
		
		$display("checking C = 32512 and is written to R6");
		write = 1'b1;
		writenum = 3'b110;
		readnum = 3'b110;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'd32512);
		write = 1'b0;
		
		//Change in input: readnum = 6, loada = 1
		//store R2 in register B
		$display("checking loada = C (d32512)");
		readnum = 3'b110;
		loada = 1'b1;
		#10;
		loadb_a_checker(16'd16256, 16'd32512);
		loadb = 1'b0; //set loadb = 1
		
		//Change in input: asel = 1, bsel = 0, shift = 01, ALUop = 0, loadc = 1, loads = 0
		//Testing if status flag overflow
		$display("checking ALUout = 32512 + 256 = -32768, not 32768");
		sximm5 = 16'd256;
		asel = 1'b0;
		bsel = 1'b1;
		shift = 2'b00;
		ALUop = 2'b00;
		loadc = 1'b1;
		loads = 1'b1; //change loads to test status
		#10;
		data_checker(16'd32512, 16'd16256, 16'h8000, 3'b110, 16'h8000);
		
		$display("checking C = -32768 and is written to R6");
		write = 1'b1;
		writenum = 3'b110;
		readnum = 3'b110;
		vsel = 2'b11;
		#10;
		new_changes_checker(16'h8000);
		write = 1'b0;
	
	
	end
*/

endmodule: cpu_tb