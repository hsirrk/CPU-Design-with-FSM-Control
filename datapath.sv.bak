/*
module vDFF (en, clk, in, out);
	parameter n = 16;
	input en, clk;
	input [n-1:0] in;
	output [n-1:0] out;
	reg [n-1:0] out;
	wire [n-1:0] D;
	
	assign D = en ? in : out;
	
	always_ff @(posedge clk) begin
		out <= D;
	end
endmodule
*/
module vMUX (sel, in1, in0, out);
	parameter n = 16;
	input sel;
	input [n-1:0] in1, in0;
	output [n-1:0] out;

	assign out = sel ? in1 : in0;
	
endmodule

module datapath(clk, readnum, vsel, loada, loadb, shift, asel, bsel, ALUop, loadc, loads, 
			writenum, write, datapath_in, Z_out, datapath_out);
	input clk, vsel, loada, loadb, asel, bsel, loadc, loads, write;
	input [2:0] readnum, writenum;
	input [1:0] shift, ALUop;
	input [15:0] datapath_in;
	output Z_out;
	output [15:0] datapath_out;
	reg Z_out;
	
	wire [15:0] DatSOMA_Out, DataOut, RegAout, RegBout, shifterOut, SOMA_Out, SOMB_Out, ALUout;
	wire ALU_Z, D;
	
	vMUX Writeback_Multiplexer(.sel(vsel), .in1(datapath_in), .in0(datapath_out), .out(DatSOMA_Out) );
	regfile REGFILE(.data_in(DatSOMA_Out), .writenum(writenum), .write(write), .readnum(readnum), .clk(clk), .data_out(DataOut) );
	veDFF PipeLine_RegA(.en(loada), .clk(clk), .in(DataOut), .out(RegAout) );
	veDFF PipeLine_RegB(.en(loadb), .clk(clk), .in(DataOut), .out(RegBout) );
	shifter Shifter_Unit(.in(RegBout), .shift(shift), .sout(shifterOut) );
	vMUX Source_Op_MUXA(.sel(asel), .in1(16'b0), .in0(RegAout), .out(SOMA_Out) );
	vMUX Source_Op_MUXB(.sel(bsel), .in1({11'b0, datapath_in[4:0]}), .in0(shifterOut), .out(SOMB_Out) );
	ALU ALU(.Ain(SOMA_Out), .Bin(SOMB_Out), .ALUop(ALUop), .out(ALUout), .Z(ALU_Z) );
	veDFF PipeLine_RegC(.en(loadc), .clk(clk), .in(ALUout), .out(datapath_out) );
	
	//The Status DFF
	assign D = loads ? ALU_Z : Z_out;
	always_ff @(posedge clk) begin
		Z_out <= D;
	end
	
endmodule